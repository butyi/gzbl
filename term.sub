;*******************************************************************************
; Terminal service on UART
;*******************************************************************************

;*******************************************************************************
; MACROS
;*******************************************************************************

putspace            macro
                    lda       #' '
                    jsr       sciputc
                    endm
;-------------------------------------------------------------------------------
putn                macro
                    lda       #10                 ; '\n'
                    jsr       sciputc
                    endm
;-------------------------------------------------------------------------------
puta                macro
                    jsr       sciputb
                    @putspace
                    endm
;-------------------------------------------------------------------------------
putk                macro     kar
                    lda       #~@~
                    jsr       sciputc
                    endm
;-------------------------------------------------------------------------------
puthx               macro
                    tha
                    jsr       sciputb
                    txa
                    jsr       sciputb
                    @putspace
                    endm

;*******************************************************************************
; STRINGS
;*******************************************************************************

startstrt           fcs       ' Push T button for terminal!',NL
termstr             fcs       'Serial terminal. Push ? to help!',NL
warn1str            fcs       NL,'Warning! Last byte was half byte.',NL
err1str             fcs       NL,'Error! Data are outside of page.',NL
err2str             fcs       NL,'Error! Too high address.',NL
helpstr             fcc       NL,'x : exit from terminal.'
                    fcc       NL,'r : Reset MCU.'
                    fcc       NL,'dAAAA : Dump from address AAAAh (Default 0000h).'
                    fcc       NL,'n : Next (Dump).'
                    fcc       NL,'b : Back (Dump).'
                    fcc       NL,'a : Again (Dump).'
                    fcc       NL,'hAAAA11223344 [ENTER] : Hexa write from address AAAAh,'
                    fcc       NL,'tAAAAwww.butyi.hu [ENTER] : Text write from address AAAAh,'
                    fcc       NL,'eAAAA : Erase page from address AAAAh (128 bytes).'
                    fcs       NL

;*******************************************************************************

TERM_Init           proc
                    ldhx      #startstrt
                    jmp       sciputs

;*******************************************************************************

egetkey             proc
Loop@@              jsr       TBMHandle           ; loop when waiting for a terminal character
                    @ledneg                       ; Toggle LED
          ;--------------------------------------
          ; Check if timeout elapsed (user didn't
          ; do anything in the last 8s)
          ;--------------------------------------
                    tst       comtimer
                    bne       _1@@                ; Jump through on timeout handling
          ;--------------------------------------
          ; Timeout handling: Simulate pushed 'x'
          ; button to leave terminal
          ;--------------------------------------
                    lda       #'x'
                    bra       Enter@@
_1@@                                              ; No timeout
                    jsr       scigetc             ; Check character from useer
                    bcc       Loop@@              ; No character arrived, wait further
                    mov       #250,comtimer       ; Character arrived, pull up 8s timer
          ;-------------------------------------- ; Change Linux ENTER key to Windows ENTER key
                    cmp       #10                 ; Linux ENTER
                    bne       Enter@@
                    lda       #13                 ; Windows ENTER
Enter@@             jsr       sciputc             ; Echo back the pushed key
                    tsta                          ; Set CCR to be able to use conditional branches after return
                    rts

;*******************************************************************************
; Serial terminal

?TermHelp           proc
                    ldhx      #helpstr
                    jsr       sciputs
                    bra       ?Terminal

;*******************************************************************************

Terminal            proc
                    clr       cs_trign            ; Reset pending connection attempt
                    ldhx      #termstr
                    jsr       sciputs
                    mov       #250,comtimer       ; 32ms * 250 ~= 8s
?Terminal           bsr       egetkey
                    cmp       #'x'
                    beq       Done@@
                    cmp       #'r'
                    beq       *                   ; proci reset
                    cmp       #'d'
                    beq       ?TermDump
                    cmp       #'n'
                    beq       ?TermDumpN
                    cmp       #'a'
                    beq       ?TermDumpA
                    cmp       #'b'
                    beq       ?TermDumpB
                    cmp       #'?'
                    beq       ?TermHelp
                    cmp       #'t'
                    jeq       term_text
                    cmp       #'h'
                    jeq       term_hexa
                    cmp       #'e'
                    jeq       term_erase
                    bra       ?Terminal
Done@@              @putn
                    rts

?TermDumpB          ldhx      dump_addr
                    tha
                    deca
                    tah
                    sthx      dump_addr
?TermDumpA          ldhx      dump_addr
                    tha
                    deca
                    tah
                    sthx      dump_addr
                    bra       ?TermDumpN
?TermDump           jsr       getdumpaddr
?TermDumpN          ldhx      dump_addr           ;continue
                    bsr       dump8lines
                    @putn
                    bsr       dump8lines
                    @putn
                    sthx      dump_addr
                    bra       ?Terminal

;*******************************************************************************

dump8lines          proc
                    lda       #8
Loop@@              psha
                    bsr       dumpline
                    pula
                    dbnza     Loop@@
                    rts

;*******************************************************************************

dumphn              proc                          ; Dump Hexa n-times
Loop@@              psha
                    lda       ,x
                    jsr       sciputb
                    aix       #1
                    pula
                    dbnza     Loop@@
                    rts

;*******************************************************************************

dumpline            proc
                    @putn
                    tha
                    jsr       sciputb
                    txa
                    jsr       sciputb
                    lda       #':'
                    jsr       sciputc
                    @putspace
                    lda       #4
                    bsr       dumphn
                    @putspace
                    lda       #4
                    bsr       dumphn
                    @putspace
                    @putspace
                    lda       #4
                    bsr       dumphn
                    @putspace
                    lda       #4
                    bsr       dumphn
                    @putspace
                    lda       #'|'
                    jsr       sciputc
                    @putspace
                    aix       #-16
                    lda       #8
                    bsr       dumpan
                    @putspace
                    lda       #8
;                   bra       dumpan

;*******************************************************************************

dumpan              proc                          ; Dump ascii n-times
Loop@@              psha
                    lda       ,x
          ;-------------------------------------- ; If character is not displayable, print dot
                    cmp       #' '
                    blo       Dot@@
                    cmp       #$7F
                    bls       Char@@
Dot@@               lda       #'.'
Char@@              jsr       sciputc
                    aix       #1
                    pula
                    dbnza     Loop@@
                    rts

;*******************************************************************************

term_common         proc
                    clr       wr_datac            ; Clear length of write
                    ldhx      #wr_datat           ; Copy buffer address
                    sthx      wr_datap            ; to pointer variable
                    jmp       getdumpaddr         ; Read address from user

;*******************************************************************************
; Text write into flash

term_text           proc
                    bsr       term_common         ; Call common part of terminal write
                    bsr       gettextdata         ; Read text data from user
                    bra       ?TermCommEnd        ; Jump to write

;*******************************************************************************
; Hexa data write into flash

term_hexa           proc
                    bsr       term_common         ; Call common part of terminal write
                    bsr       gethexadata         ; Read hexa data from user
          ;--------------------------------------
          ; Check if complete byte are given (in
          ; hexa mode one character is just 4 bits)
          ;--------------------------------------
                    lda       wr_datac
                    and       #1
                    beq       ?TermCommEnd        ; If even, no problem
          ;-------------------------------------- ; If odd, print a warning
                    ldhx      #warn1str
                    jsr       sciputs
          ;-------------------------------------- ; Check if is there any data to be written
?TermCommEnd        tst       wr_datac
                    jeq       ?Terminal           ; If no, jump back to main menu
          ;--------------------------------------
          ; Check if data to be written is still
          ; inside the page. if $80 < ((cim & $7f) + len) then too long
          ;--------------------------------------
                    lda       dump_addr+1         ; Low byte of address
                    and       #$7F
                    deca
                    add       wr_datac
                    bpl       TermInPage@@        ; If positive, so sign bit is zero, then still inside the page
          ;-------------------------------------- ; Error message about too long data
                    ldhx      #err1str
                    jsr       sciputs
                    jmp       ?Terminal
          ;--------------------------------------
          ; Check that all addresses to be written
          ; is lower that bootloader area
          ;--------------------------------------
TermInPage@@        ldhx      dump_addr
                    lda       wr_datac
                    jsr       addhxanda
                    cphx      #Start
                    blo       TermAddrGood@@
          ;--------------------------------------
          ; Write attempt to not allowed area, error message is reported
          ;--------------------------------------
                    ldhx      #err2str
                    jsr       sciputs
                    jmp       ?Terminal           ; Back to main menu

TermAddrGood@@      jsr       write               ; Write data into flash
                    clr       dump_addr+1         ; Dump from begin of 256 byte long page
                    jmp       ?TermDumpN          ; Print dump to verify write was successful

;*******************************************************************************
; Erase page from terminal

term_erase          proc
          ;-------------------------------------- ; Read address
                    bsr       getdumpaddr
                    jsr       erasepage           ; Erase flash page
                    jmp       ?TermDumpN          ; Print dump to verify erase was successful

;*******************************************************************************
; Read hexa bytes from user till ENTER key

gethexadata         proc
          ;-------------------------------------- ; Check if data is not too long
                    lda       wr_datac
                    cmp       #128
                    @req
                    jsr       egetkey             ; Read a character from user
                    cmp       #13                 ; Windows enter
                    @req
                    bsr       convtoval           ; Convert character to 4 bits binary value
                    nsa                           ; Shift up by 4 bits
                    psha                          ; Save high nibble
                    jsr       egetkey             ; Read a character from user
                    cmp       #13                 ; Windows enter
                    @req
                    bsr       convtoval           ; Convert character to 4 bits binary value
                    ldhx      wr_datap            ; Load buffer pointer as index
                    ora       1,sp                ; Binary or with high nibble
                    sta       ,x                  ; Write character to buffer
                    ais       #1                  ; Drop out high nibble from stack

                    bsr       getdata_next
                    bra       gethexadata

;*******************************************************************************
; Read string from user till ENTER key

gettextdata         proc
          ;-------------------------------------- ; Check if data is not too long
Loop@@              lda       wr_datac
                    cmp       #128
                    @req

                    jsr       egetkey             ; Read a character from user
                    cmp       #$0d                ; Windows enter
                    @req
                    ldhx      wr_datap            ; Load buffer pointer as index
                    sta       ,x                  ; Write character to buffer

                    bsr       getdata_next
                    bra       Loop@@

;*******************************************************************************

getdata_next        proc
                    inc       wr_datac            ; Increase length
                    ldhx      wr_datap            ; Increase pointer
                    aix       #1
                    sthx      wr_datap
                    rts

;*******************************************************************************
; Convert character to 4 bits binary value

convtoval           proc
                    sub       #48
                    bmi       _0@@
                    cmp       #10
                    blo       Done@@
                    sub       #7
                    bmi       _0@@
                    cmp       #10
                    blo       _0@@
                    cmp       #16
                    blo       Done@@
                    sub       #32
                    bmi       _0@@
                    cmp       #10
                    blo       _0@@
                    cmp       #16
                    blo       Done@@
_0@@                clra
Done@@              and       #$0F
                    rts

;*******************************************************************************

getdumpaddr         proc
                    jsr       egetkey
                    bsr       convtoval           ; Convert character to 4 bits binary value
                    nsa
                    sta       dump_addr

                    jsr       egetkey
                    bsr       convtoval           ; Convert character to 4 bits binary value
                    ora       dump_addr
                    sta       dump_addr

                    jsr       egetkey
                    bsr       convtoval           ; Convert character to 4 bits binary value
                    nsa
                    sta       dump_addr+1

                    jsr       egetkey
                    bsr       convtoval           ; Convert character to 4 bits binary value
                    ora       dump_addr+1
                    sta       dump_addr+1
                    rts

;*******************************************************************************
                    #sp
;*******************************************************************************
